{
  "version": 3,
  "file": "register_user_cli.js",
  "sourceRoot": "",
  "sources": [
    "register_user_cli.coffee"
  ],
  "names": [],
  "mappings": "AAAA;;;AAAA,IAAA,IAAA,EAAA,eAAA,EAAA,GAAA,EAAA,MAAA;;;;;AAOA,GAAA,GAAM,OAAA,CAAQ,OAAR,EAPN;;;AAUA,MAAA,GAAS,OAAA,CAAQ,UAAR,EAVT;;;;;;AAgBA,IAAG,OAAO,CAAC,IAAR,KAAgB,MAAnB;;EAEC,eAAA,GAAkB,IAAI,GAAG,CAAC,cAAR,CACjB;IAAA,WAAA,EAAa;EAAb,CADiB;EAElB,eAAe,CAAC,WAAhB,CAA4B,CAAC,aAAD,EAAgB,IAAhB,CAA5B,EACC;IAAA,YAAA,EAAc,IAAd;IACA,IAAA,EAAM,QADN;IAEA,IAAA,EAAM;EAFN,CADD;EAIA,eAAe,CAAC,WAAhB,CAA4B,CAAC,gBAAD,EAAmB,IAAnB,CAA5B,EACC;IAAA,QAAA,EAAU,KAAV;IACA,IAAA,EAAM,QADN;IAEA,IAAA,EAAM;EAFN,CADD;EAIA,IAAA,GAAO,eAAe,CAAC,SAAhB,CAAA,EAVP;;EAaA,OAAO,CAAC,GAAR,CAAY,GAAG,CAAC,aAAJ,CAAkB,8FAAlB,EAAkH,IAAlH,CAAZ,EAbA;;EAeA,GAAG,CAAC,KAAJ,CAAa,IAAI,CAAC,YAAR,GAA0B,KAA1B,GAAqC,CAA/C,CACA,CAAC,IADD,CACM,QAAA,CAAA,CAAA;WACL,GAAG,CAAC,aAAJ,CAAkB,IAAI,CAAC,YAAvB,EAAqC,OAAO,CAAC,KAA7C,EAAoD,QAAA,CAAC,oBAAD,CAAA;AAEnD,UAAA,OAAA,EAAA,aAAA;;MAAA,aAAA,GAAgB,MAAM,CAAC,QAAQ,CAAC,KAAhB,CAAsB,oBAAtB;MAChB,OAAO,CAAC,GAAR,CAAY,CAAA,6CAAA,CAAA,CAAiD,aAAa,CAAC,OAA/D,CAAuE,aAAvE,CAAA,CAAwF,aAAa,CAAC,YAAtG,CAAmH,cAAnH,CAAA,CAAqI,aAAa,CAAC,MAAnJ,CAA0J,IAA1J,CAAZ;MACA,OAAA,GAAU,IAAI,MAAM,CAAC,OAAX,CACT;QAAA,OAAA,EAAS,aAAa,CAAC;MAAvB,CADS;aAEV,OAAO,CAAC,eAAR,CAAwB,aAAa,CAAC,YAAtC,CACA,CAAC,IADD,CACM,QAAA,CAAC,SAAD,CAAA;QACL,OAAO,CAAC,GAAR,CAAY,kCAAA,GAAqC,GAAG,CAAC,aAAJ,CAAkB,CAAA,UAAA,CAAA,CAAa,aAAa,CAAC,OAA3B,CAAmC,WAAnC,CAAA,CAAgD,SAAS,CAAC,OAA1D,CAAkE,YAAlE,CAAA,CAAgF,SAAS,CAAC,QAA1F,CAAA,CAAlB,EAAwH,IAAxH,CAAjD;QACA,OAAO,CAAC,GAAR,CAAY,CAAA,sBAAA,CAAA,CAA0B,IAAI,CAAC,SAA/B,CAAyC,IAAzC,CAAZ;eACA,OAAO,CAAC,aAAR,CAAsB,IAAI,CAAC,SAA3B;MAHK,CADN,CAKA,CAAC,IALD,CAKM,QAAA,CAAC,SAAD,CAAA;QACL,OAAO,CAAC,GAAR,CAAY,+CAAZ;eACA,OAAO,CAAC,UAAR,CAAA;MAFK,CALN,CAQA,CAAC,KARD,CAQO,QAAA,CAAC,KAAD,CAAA,EAAA;;QAEN,OAAO,CAAC,KAAR,CAAc,KAAd;eACA,GAAG,CAAC,IAAJ,CAAS,CAAT;MAHM,CARP;IANmD,CAApD;EADK,CADN,CAoBA,CAAC,IApBD,CAoBM,QAAA,CAAA,CAAA,EAAA;;WAEL,GAAG,CAAC,IAAJ,CAAA;EAFK,CApBN,EAjBD",
  "sourcesContent": [
    "`#!/usr/bin/env node\n\n'use strict'`\n\n# Command line tool for registering users on eqiva eQ-3 Bluetooth smart locks\n\n# Import/Require the local \"cli\" module that provides some useful functions for CLI scripts\ncli = require('./cli')\n\n# Import/Require the \"keyble\" module that provides a library for the eqiva eQ-3 Bluetooth smart locks\nkeyble = require('./keyble')\n\n# ----\n# MAIN\n# ----\n# Only execute the following code when run from the command line\nif require.main is module\n\t# Parse the command line arguments\n\targument_parser = new cli.ArgumentParser\n\t\tdescription: \"Register users on eqiva eQ-3 Bluetooth smart locks.\"\n\targument_parser.addArgument ['--user_name', '-n'],\n\t\tdefaultValue: 'PC'\n\t\ttype: 'string'\n\t\thelp: 'The name of the user to register (default: \"PC\")'\n\targument_parser.addArgument ['--qr_code_data', '-q'],\n\t\trequired: false\n\t\ttype: 'string'\n\t\thelp: 'The information encoded in the QR-Code of the key card. If not provided on the command line, the data will be read as input lines from STDIN instead'\n\targs = argument_parser.parseArgs()\n\n\t# Print a short message remembering the user that he needs to activate the Smart Lock pairing mode\n\tconsole.log cli.ansi_colorize('Press and hold \"Unlock\" button until the yellow light flashes in order to enter pairing mode', '41')\n\t# If the key card data was passed directly on the command line, wait 10 seconds before proceeding, giving the user time to enter pairing mode\n\tcli.delay(if args.qr_code_data then 10000 else 0)\n\t.then ->\n\t\tcli.process_input args.qr_code_data, process.stdin, (key_card_data_string) ->\n\t\t\t# Parse/Decode the information encoded in the QR-Codes on the \"Key Card\"s\n\t\t\tkey_card_data = keyble.key_card.parse(key_card_data_string)\n\t\t\tconsole.log \"Registering user on Smart Lock with address \\\"#{key_card_data.address}\\\", card key \\\"#{key_card_data.register_key}\\\" and serial \\\"#{key_card_data.serial}\\\"...\"\n\t\t\tkey_ble = new keyble.Key_Ble\n\t\t\t\taddress: key_card_data.address\n\t\t\tkey_ble.pairing_request(key_card_data.register_key)\n\t\t\t.then (user_data) ->\n\t\t\t\tconsole.log \"User registered. Use arguments: \" + cli.ansi_colorize(\"--address #{key_card_data.address} --user_id #{user_data.user_id} --user_key #{user_data.user_key}\", '44')\n\t\t\t\tconsole.log \"Setting user name to \\\"#{args.user_name}\\\"...\"\n\t\t\t\tkey_ble.set_user_name(args.user_name)\n\t\t\t.then (user_data) ->\n\t\t\t\tconsole.log \"User name changed, finished registering user.\"\n\t\t\t\tkey_ble.disconnect()\n\t\t\t.catch (error) ->\n\t\t\t\t# An error occurred while registering the user. Print the error message and exit with exit code 1\n\t\t\t\tconsole.error(error)\n\t\t\t\tcli.exit(1)\n\t.then ->\n\t\t# \"noble\", the Bluetooth library being used, does not properly shut down. An explicit process.exit() is required when finished\n\t\tcli.exit()\n"
  ]
}