{
  "version": 3,
  "file": "sendcommand.js",
  "sourceRoot": "",
  "sources": [
    "sendcommand.coffee"
  ],
  "names": [],
  "mappings": "AAAA;;;AAAA,IAAA,IAAA,EAAA,eAAA,EAAA,GAAA,EAAA,4BAAA,EAAA,0BAAA,EAAA,oBAAA,EAAA,OAAA,EAAA,MAAA;;;;;AAOA,GAAA,GAAM,OAAA,CAAQ,OAAR,EAPN;;;AAUA,MAAA,GAAS,OAAA,CAAQ,UAAR,EAVT;;;AAaA,4BAAA,GAA+B,KAb/B;;;AAgBA,0BAAA,GAA6B,MAhB7B;;;AAmBA,oBAAA,GAAuB,KAnBvB;;;;;;AAyBA,IAAI,OAAO,CAAC,IAAR,KAAgB,MAApB;;EAEC,eAAA,GAAkB,IAAI,GAAG,CAAC,cAAR,CACjB;IAAA,WAAA,EAAa;EAAb,CADiB;EAElB,eAAe,CAAC,WAAhB,CAA4B,CAAC,WAAD,EAAc,IAAd,CAA5B,EACC;IAAA,QAAA,EAAU,IAAV;IACA,IAAA,EAAM,QADN;IAEA,IAAA,EAAM;EAFN,CADD;EAIA,eAAe,CAAC,WAAhB,CAA4B,CAAC,WAAD,EAAc,IAAd,CAA5B,EACC;IAAA,QAAA,EAAU,IAAV;IACA,IAAA,EAAM,KADN;IAEA,IAAA,EAAM;EAFN,CADD;EAIA,eAAe,CAAC,WAAhB,CAA4B,CAAC,YAAD,EAAe,IAAf,CAA5B,EACC;IAAA,QAAA,EAAU,IAAV;IACA,IAAA,EAAM,QADN;IAEA,IAAA,EAAM;EAFN,CADD;EAIA,eAAe,CAAC,WAAhB,CAA4B,CAAC,wBAAD,EAA2B,MAA3B,CAA5B,EACC;IAAA,IAAA,EAAM,OAAN;IACA,YAAA,EAAc,4BADd;IAEA,IAAA,EAAM,CAAA,8NAAA,CAAA,CAAiO,4BAAjO,CAA8P,CAA9P;EAFN,CADD;EAIA,eAAe,CAAC,WAAhB,CAA4B,CAAC,sBAAD,EAAyB,MAAzB,CAA5B,EACC;IAAA,IAAA,EAAM,OAAN;IACA,YAAA,EAAc,0BADd;IAEA,IAAA,EAAM,CAAA,wMAAA,CAAA,CAA2M,0BAA3M,CAAsO,CAAtO;EAFN,CADD;EAIA,eAAe,CAAC,WAAhB,CAA4B,CAAC,WAAD,EAAc,IAAd,CAA5B,EACC;IAAA,IAAA,EAAM,OAAN;IACA,YAAA,EAAc,oBADd;IAEA,IAAA,EAAM,CAAA,8IAAA,CAAA,CAAiJ,oBAAjJ,CAAsK,CAAtK;EAFN,CADD;EAIA,eAAe,CAAC,WAAhB,CAA4B,CAAC,WAAD,EAAc,IAAd,CAA5B,EACC;IAAA,OAAA,EAAS,CAAC,MAAD,EAAS,MAAT,EAAiB,QAAjB,EAA2B,QAA3B,CAAT;IACA,QAAA,EAAU,KADV;IAEA,IAAA,EAAM,QAFN;IAGA,IAAA,EAAM;EAHN,CADD;EAKA,IAAA,GAAO,eAAe,CAAC,SAAhB,CAAA;EAEP,OAAA,GAAU,IAAI,MAAM,CAAC,OAAX,CACT;IAAA,OAAA,EAAS,IAAI,CAAC,OAAd;IACA,OAAA,EAAS,IAAI,CAAC,OADd;IAEA,QAAA,EAAU,IAAI,CAAC,QAFf;IAGA,oBAAA,EAAsB,IAAI,CAAC,oBAH3B;IAIA,kBAAA,EAAoB,IAAI,CAAC;EAJzB,CADS;EAMV,OAAO,CAAC,EAAR,CAAW,eAAX,EAA4B,QAAA,CAAC,SAAD,EAAY,aAAZ,CAAA;WAC3B,OAAO,CAAC,GAAR,CAAY,aAAZ;EAD2B,CAA5B;EAEA,GAAG,CAAC,aAAJ,CAAkB,IAAI,CAAC,OAAvB,EAAgC,OAAO,CAAC,KAAxC,EAA+C,QAAA,CAAC,OAAD,CAAA;WAC9C,MAAM,CAAC,KAAK,CAAC,UAAb,CAAwB;AAAC,cAAO,OAAP;AAAA,aACnB,MADmB;iBACP,OAAO,CAAC,IAAR,CAAA;AADO,aAEnB,QAFmB;iBAEL,OAAO,CAAC,MAAR,CAAA;AAFK,aAGnB,MAHmB;iBAGP,OAAO,CAAC,IAAR,CAAA;AAHO,aAInB,QAJmB;iBAIL,OAAO,CAAC,cAAR,CAAA;AAJK;iBAKnB,OAAO,CAAC,MAAR,CAAe,CAAA,iBAAA,CAAA,CAAqB,OAArB,CAA6B,CAA7B,CAAf;AALmB;QAAD,CAAxB,EAMI,IAAI,CAAC,OAAL,GAAe,IANnB,CAMyB,CAAC,KAN1B,CAMgC,QAAA,CAAC,KAAD,CAAA;aAC/B,OAAO,CAAC,KAAR,CAAc,CAAA,OAAA,CAAA,CAAU,KAAV,CAAA,CAAd;IAD+B,CANhC;EAD8C,CAA/C,CASA,CAAC,IATD,CASM,QAAA,CAAA,CAAA,EAAA;;WAEL,GAAG,CAAC,IAAJ,CAAA;EAFK,CATN,EA3CD",
  "sourcesContent": [
    "`#!/usr/bin/env node\n\n'use strict'`\n\n# Command line tool for controlling (lock/unlock/open) eQ-3 eqiva Bluetooth smart locks\n\n# Import/Require the local \"cli\" module that provides some useful functions for CLI scripts\ncli = require('./cli')\n\n# Import/Require the \"keyble\" module that provides a library for the eQ-3 eqiva Bluetooth smart locks\nkeyble = require('./keyble')\n\n# The default auto-disconnect time, in seconds\ndefault_auto_disconnect_time = 30.0\n\n# The default status update time, in seconds\ndefault_status_update_time = 600.0\n\n# The default timeout time, in seconds\ndefault_timeout_time = 45.0\n\n# ----\n# MAIN\n# ----\n# Only execute the following code when run from the command line\nif (require.main is module)\n\t# Parse the command line arguments\n\targument_parser = new cli.ArgumentParser\n\t\tdescription: 'Control (lock/unlock/open) an eQ-3 eqiva Bluetooth smart lock.'\n\targument_parser.addArgument ['--address', '-a'],\n\t\trequired: true\n\t\ttype: 'string'\n\t\thelp: 'The smart lock\\'s MAC address'\n\targument_parser.addArgument ['--user_id', '-u'],\n\t\trequired: true\n\t\ttype: 'int'\n\t\thelp: 'The user ID'\n\targument_parser.addArgument ['--user_key', '-k'],\n\t\trequired: true\n\t\ttype: 'string'\n\t\thelp: 'The user key'\n\targument_parser.addArgument ['--auto_disconnect_time', '-adt'],\n\t\ttype: 'float'\n\t\tdefaultValue: default_auto_disconnect_time\n\t\thelp: \"The auto-disconnect time. If connected to the lock, the connection will be automatically disconnected after this many seconds of inactivity, in order to save battery. A value of 0 will deactivate auto-disconnect (default: #{default_auto_disconnect_time})\"\n\targument_parser.addArgument ['--status_update_time', '-sut'],\n\t\ttype: 'float'\n\t\tdefaultValue: default_status_update_time\n\t\thelp: \"The status update time. If no status information has been received for this many seconds, automatically connect to the lock and query the status. A value of 0 will deactivate status updates (default: #{default_status_update_time})\"\n\targument_parser.addArgument ['--timeout', '-t'],\n\t\ttype: 'float'\n\t\tdefaultValue: default_timeout_time\n\t\thelp: \"The timeout time. Commands must finish within this many seconds, otherwise there is an error. A value of 0 will deactivate timeouts (default: #{default_timeout_time})\"\n\targument_parser.addArgument ['--command', '-c'],\n\t\tchoices: ['lock', 'open', 'unlock', 'status']\n\t\trequired: false\n\t\ttype: 'string'\n\t\thelp: 'The command to perform. If not provided on the command line, the command(s) will be read as input lines from STDIN instead'\n\targs = argument_parser.parseArgs()\n\n\tkey_ble = new keyble.Key_Ble\n\t\taddress: args.address\n\t\tuser_id: args.user_id\n\t\tuser_key: args.user_key\n\t\tauto_disconnect_time: args.auto_disconnect_time\n\t\tstatus_update_time: args.status_update_time\n\tkey_ble.on 'status_change', (status_id, status_string) ->\n\t\tconsole.log status_string\n\tcli.process_input args.command, process.stdin, (command) ->\n\t\tkeyble.utils.time_limit((switch command\n\t\t\twhen 'lock' then key_ble.lock()\n\t\t\twhen 'unlock' then key_ble.unlock()\n\t\t\twhen 'open' then key_ble.open()\n\t\t\twhen 'status' then key_ble.request_status()\n\t\t\telse Promise.reject(\"Unknown command \\\"#{command}\\\"\")\n\t\t), (args.timeout * 1000)).catch (error) ->\n\t\t\tconsole.error \"Error: #{error}\"\n\t.then ->\n\t\t# \"noble\", the Bluetooth library being used, does not properly shut down. An explicit process.exit() is required when finished\n\t\tcli.exit()\n"
  ]
}