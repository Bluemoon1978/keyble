{
  "version": 3,
  "file": "sendcommand.js",
  "sourceRoot": "",
  "sources": [
    "sendcommand.coffee"
  ],
  "names": [],
  "mappings": "AAAA;;;AAAA,IAAA,IAAA,EAAA,eAAA,EAAA,GAAA,EAAA,OAAA,EAAA,MAAA;;;;;AAOA,GAAA,GAAM,OAAA,CAAQ,OAAR,EAPN;;;AAUA,MAAA,GAAS,OAAA,CAAQ,UAAR,EAVT;;;;;;AAgBA,IAAG,OAAO,CAAC,IAAR,KAAgB,MAAnB;;EAEC,eAAA,GAAkB,IAAI,GAAG,CAAC,cAAR,CACjB;IAAA,WAAA,EAAa;EAAb,CADiB;EAElB,eAAe,CAAC,WAAhB,CAA4B,CAAC,WAAD,EAAc,IAAd,CAA5B,EACC;IAAA,QAAA,EAAU,IAAV;IACA,IAAA,EAAM,QADN;IAEA,IAAA,EAAM;EAFN,CADD;EAIA,eAAe,CAAC,WAAhB,CAA4B,CAAC,WAAD,EAAc,IAAd,CAA5B,EACC;IAAA,QAAA,EAAU,IAAV;IACA,IAAA,EAAM,KADN;IAEA,IAAA,EAAM;EAFN,CADD;EAIA,eAAe,CAAC,WAAhB,CAA4B,CAAC,YAAD,EAAe,IAAf,CAA5B,EACC;IAAA,QAAA,EAAU,IAAV;IACA,IAAA,EAAM,QADN;IAEA,IAAA,EAAM;EAFN,CADD;EAIA,eAAe,CAAC,WAAhB,CAA4B,CAAC,WAAD,EAAc,IAAd,CAA5B,EACC;IAAA,OAAA,EAAS,CAAC,MAAD,EAAS,MAAT,EAAiB,QAAjB,CAAT;IACA,QAAA,EAAU,KADV;IAEA,IAAA,EAAM,QAFN;IAGA,IAAA,EAAM;EAHN,CADD;EAKA,IAAA,GAAO,eAAe,CAAC,SAAhB,CAAA;EAEP,OAAA,GAAU,IAAI,MAAM,CAAC,OAAX,CACT;IAAA,OAAA,EAAS,IAAI,CAAC,OAAd;IACA,OAAA,EAAS,IAAI,CAAC,OADd;IAEA,QAAA,EAAU,IAAI,CAAC;EAFf,CADS;EAIV,GAAG,CAAC,aAAJ,CAAkB,IAAI,CAAC,OAAvB,EAAgC,OAAO,CAAC,KAAxC,EAA+C,QAAA,CAAC,OAAD,CAAA;IAC9C,OAAO,CAAC,GAAR,CAAY,CAAA,iBAAA,CAAA,CAAqB,OAArB,CAA6B,IAA7B,CAAZ;WACA,OAAO,CAAC,YAAR,CAAqB;MAAC,MAAA,EAAO,CAAR;MAAW,QAAA,EAAS,CAApB;MAAuB,MAAA,EAAO;IAA9B,CAAiC,CAAA,OAAA,CAAtD,CACA,CAAC,IADD,CACM,QAAA,CAAA,CAAA;aACL,OAAO,CAAC,GAAR,CAAY,CAAA,SAAA,CAAA,CAAa,OAAb,CAAqB,OAArB,CAAZ;IADK,CADN,CAGA,CAAC,IAHD,CAGM,QAAA,CAAA,CAAA,EAAA;;aAEL,GAAG,CAAC,KAAJ,CAAU,IAAV;IAFK,CAHN,CAMA,CAAC,IAND,CAMM,QAAA,CAAA,CAAA;aACL,OAAO,CAAC,UAAR,CAAA;IADK,CANN,CAQA,CAAC,KARD,CAQO,QAAA,CAAC,KAAD,CAAA;aACN,OAAO,CAAC,KAAR,CAAc,CAAA,OAAA,CAAA,CAAU,KAAV,CAAA,CAAd;IADM,CARP;EAF8C,CAA/C,CAYA,CAAC,IAZD,CAYM,QAAA,CAAA,CAAA,EAAA;;WAEL,GAAG,CAAC,KAAJ,CAAU,IAAV;EAFK,CAZN,CAeA,CAAC,IAfD,CAeM,QAAA,CAAA,CAAA,EAAA;;WAEL,GAAG,CAAC,IAAJ,CAAA;EAFK,CAfN,EA3BD",
  "sourcesContent": [
    "`#!/usr/bin/env node\n\n'use strict'`\n\n# Command line tool for controlling (lock/unlock/open) eqiva eQ-3 Bluetooth smart locks\n\n# Import/Require the local \"cli\" module that provides some useful functions for CLI scripts\ncli = require('./cli')\n\n# Import/Require the \"keyble\" module that provides a library for the eqiva eQ-3 Bluetooth smart locks\nkeyble = require('./keyble')\n\n# ----\n# MAIN\n# ----\n# Only execute the following code when run from the command line\nif require.main is module\n\t# Parse the command line arguments\n\targument_parser = new cli.ArgumentParser\n\t\tdescription: 'Control (lock/unlock/open) an eqiva eQ-3 Bluetooth smart lock.'\n\targument_parser.addArgument ['--address', '-a'],\n\t\trequired: true\n\t\ttype: 'string'\n\t\thelp: 'The smart lock\\'s MAC address'\n\targument_parser.addArgument ['--user_id', '-u'],\n\t\trequired: true\n\t\ttype: 'int'\n\t\thelp: 'The user ID'\n\targument_parser.addArgument ['--user_key', '-k'],\n\t\trequired: true\n\t\ttype: 'string'\n\t\thelp: 'The user key'\n\targument_parser.addArgument ['--command', '-c'],\n\t\tchoices: ['lock', 'open', 'unlock']\n\t\trequired: false\n\t\ttype: 'string'\n\t\thelp: 'The command to perform. If not provided on the command line, the command(s) will be read as input lines from STDIN instead'\n\targs = argument_parser.parseArgs()\n\n\tkey_ble = new keyble.Key_Ble\n\t\taddress: args.address\n\t\tuser_id: args.user_id\n\t\tuser_key: args.user_key\n\tcli.process_input args.command, process.stdin, (command) ->\n\t\tconsole.log \"Sending command \\\"#{command}\\\"...\"\n\t\tkey_ble.send_command({'lock':0, 'unlock':1, 'open':2}[command])\n\t\t.then ->\n\t\t\tconsole.log \"Command \\\"#{command}\\\" sent.\"\n\t\t.then ->\n\t\t\t# TODO this should be improved as well\n\t\t\tcli.delay(5000)\n\t\t.then ->\n\t\t\tkey_ble.disconnect()\n\t\t.catch (error) ->\n\t\t\tconsole.error \"Error: #{error}\"\n\t.then ->\n\t\t# TODO the delay is a dirty hack that should be removed later on. \"process_input\" above currently resolves before the commands are actually being sent; the 5 seconds delay hopefully ensures that the command is sent before the program exits via cle.exit()\n\t\tcli.delay(5000)\n\t.then ->\n\t\t# \"noble\", the Bluetooth library being used, does not properly shut down. An explicit process.exit() is required when finished\n\t\tcli.exit()\n"
  ]
}